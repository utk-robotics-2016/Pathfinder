import org.gradle.internal.os.OperatingSystem
ext.isArm = hasProperty("arm")
def compilerPrefix = project.hasProperty('compilerPrefix') ? project.compilerPrefix : 'arm-frc-linux-gnueabi-'

subprojects {
    plugins.withType(CPlugin).whenPluginAdded {
        model {
            platforms {
                if (isArm) {
                    arm {
                        architecture 'arm'
                        operatingSystem 'linux'
                    }
                } else {
                    x86 {
                        architecture 'x86'
                    }
                    x64 {
                        architecture 'x86_64'
                    }
                }
            }
            
            toolChains {
                visualCpp(VisualCpp) {
                    if (OperatingSystem.current().isWindows()) {
                        // Taken from nt-core, fixes VS2015 compilation issues 

                        // Workaround for VS2015 adapted from https://github.com/couchbase/couchbase-lite-java-native/issues/23
                        def VS_2015_INCLUDE_DIR = "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10240.0/ucrt"
                        def VS_2015_LIB_DIR = "C:/Program Files (x86)/Windows Kits/10/Lib/10.0.10240.0/ucrt"
                        def VS_2015_INSTALL_DIR = 'C:/Program Files (x86)/Microsoft Visual Studio 14.0'
                        def vsInstallDir = file(VS_2015_INSTALL_DIR)

                        eachPlatform {
                            cCompiler.withArguments { args ->
                                if (file(VS_2015_INCLUDE_DIR).exists()) {
                                    args << "/I$VS_2015_INCLUDE_DIR"
                                }
                            }
                            linker.withArguments { args ->
                                if (file(VS_2015_LIB_DIR).exists()) {
                                    if (platform.architecture.name == 'x86') {
                                        args << "/LIBPATH:$VS_2015_LIB_DIR/x86"
                                    } else {
                                        args << "/LIBPATH:$VS_2015_LIB_DIR/x64"
                                    }
                                }
                            }
                        }
                    }
                }
                
                gcc(Gcc) {
                    target("arm") {
                        cCompiler.executable = compilerPrefix + cCompiler.executable
                        linker.executable = compilerPrefix + linker.executable
                        assembler.executable = compilerPrefix + assembler.executable
                        
                        cCompiler.withArguments {args ->
                            args << '-fPIC'
                            args.remove("-m32")
                        }
                        
                        linker.withArguments { args ->
                            args << '-shared'
                            args.remove('-m32')
                        }
                        
                        staticLibArchiver.executable = compilerPrefix + staticLibArchiver.executable
                    }
                }
                
                macGcc(Clang) {
                    target("arm") {
                        cCompiler.executable = compilerPrefix + "gcc"
                        linker.executable = compilerPrefix + "gcc"
                        assembler.executable = compilerPrefix + "gcc"
                        
                        cCompiler.withArguments {args ->
                            args << '-fPIC'
                            args.remove("-m32")
                        }
                        
                        linker.withArguments { args ->
                            args << '-shared'
                            args.remove('-m32')
                        }
                        
                        staticLibArchiver.executable = compilerPrefix + "ar"
                    }
                }
            }
        }
    }
}

project.ext.installBinary = { binary, headers ->
    def allHeaders = fileTree(dir: headers.absolutePath, include: '**/*.h').getFiles().collect { file ->
        file.absolutePath
    }
    
    def prefix = "/usr/local"
    if (project.hasProperty("prefix")) prefix = project.prefix
    
    if (allHeaders.size > 0) {
        exec {
            executable "install"
            args "-m", "0755", "-d", "$prefix/include"
        }
       
        exec {
            executable "cp"
            args "-r", "${headers.absolutePath}/", "$prefix/include"
        }
    }
    
    exec {
        executable "install"
        args "-m", "0755", "-d", "$prefix/lib"
    }
    
    exec {
        executable "install"
        args "-m", "0755", "${binary.absolutePath}", "$prefix/lib"
    }
}